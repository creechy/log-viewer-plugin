/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.fakebelieve.netbeans.plugin.logviewer;

import java.awt.Component;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Action;
import javax.swing.Icon;
import javax.swing.JComponent;
import javax.swing.JTabbedPane;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.TabbedPaneFactory;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.IOContainer;
import org.openide.windows.IOContainer.CallBacks;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
    dtd = "-//org.fakebelieve.netbeans.plugin.logviewer//LogViewer//EN",
autostore = false)
@TopComponent.Description(
    preferredID = "LogViewerTopComponent",
iconBase = "org/fakebelieve/netbeans/plugin/logviewer/wilbur.png",
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "output", openAtStartup = false)
@ActionID(category = "Window", id = "org.fakebelieve.netbeans.plugin.logviewer.LogViewerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_LogViewerAction",
preferredID = "LogViewerTopComponent")
@Messages({
    "CTL_LogViewerAction=Log Viewer",
    "CTL_LogViewerTopComponent=Log Viewer",
    "HINT_LogViewerTopComponent=Log Viewer Plugin Window"
})
public final class LogViewerTopComponent extends TopComponent implements IOContainer.Provider {

    private boolean activated = false;
    private boolean closed = false;
    protected static final Logger log = Logger.getLogger(LogViewer.class.getName());

    public LogViewerTopComponent() {
        initComponents();
        setName(Bundle.CTL_LogViewerTopComponent());
        setToolTipText(Bundle.HINT_LogViewerTopComponent());

    }

    private JTabbedPane createTabbedPane() {
        JTabbedPane pane = TabbedPaneFactory.createCloseButtonTabbedPane();
        pane.addPropertyChangeListener(TabbedPaneFactory.PROP_CLOSE, new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                JTabbedPane pane = (JTabbedPane) evt.getSource();
                int sel = pane.getSelectedIndex();
                Component component = pane.getSelectedComponent();
                if (component instanceof IOContainer.CallBacks) {
                    IOContainer.CallBacks tab = (IOContainer.CallBacks) component;
                    tab.closed();
                }
                pane.removeTabAt(sel);
            }
        });
        return pane;
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = createTabbedPane();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        super.componentOpened();
    }

    @Override
    public void componentClosed() {
        log.log(Level.FINE, "Closed. Shutting down tabs.");
        for (Component component : jTabbedPane1.getComponents()) {
            if (component instanceof IOContainer.CallBacks) {
                IOContainer.CallBacks tab = (IOContainer.CallBacks) component;
                tab.closed();
            }
            jTabbedPane1.remove(component);
        }
        closed = true;
        super.componentClosed();
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public boolean isActivated() {
        return activated;
    }

    @Override
    public void add(JComponent comp, CallBacks cb) {
        log.log(Level.FINE, "CLASS = {0}", comp.getClass().getName());
        jTabbedPane1.add(comp);
        validate();
    }

    @Override
    public void remove(JComponent jc) {
        if (jc instanceof IOContainer.CallBacks) {
            IOContainer.CallBacks tab = (IOContainer.CallBacks) jc;
        }
        jTabbedPane1.remove(jc);
    }

    @Override
    public void select(JComponent jc) {
        jTabbedPane1.setSelectedComponent(jc);
    }

    @Override
    public JComponent getSelected() {
        return (JComponent) jTabbedPane1.getSelectedComponent();
    }

    @Override
    public boolean isCloseable(JComponent jc) {
        return true;
    }

    @Override
    public int getPersistenceType() {
        return PERSISTENCE_NEVER;
    }

    private int indexOfComponent(Component comp) {
        for (int idx = 0; idx < jTabbedPane1.getComponentCount(); idx++) {
            if (comp.equals(jTabbedPane1.getComponentAt(idx))) {
                return idx;
            }
        }
        return 0;
    }

    @Override
    public void setToolbarActions(JComponent jc, Action[] actions) {
    }

    @Override
    public void setTitle(JComponent jc, String string) {
        jTabbedPane1.setTitleAt(indexOfComponent(jc), string);
    }

    @Override
    public void setToolTipText(JComponent jc, String string) {
        jTabbedPane1.setToolTipTextAt(indexOfComponent(jc), string);
    }

    @Override
    public void setIcon(JComponent jc, Icon icon) {
        jTabbedPane1.setIconAt(indexOfComponent(jc), icon);
    }

    boolean hasClosed() {
        return closed;
    }
}
